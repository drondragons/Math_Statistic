%Лабораторная работа №1. Вариант №22.

function main()
    pkg load statistics;
    %Генеральной совокупностью называется множество возможных значений 
    %случайного величины X с учётом её закона распределения.

    %Создание выборки объёма n из генеральной совокупности X.
    X = [7.76 5.96 4.58 6.13 5.05 6.40 7.46 5.55 5.01 ... 
         3.79 7.65 8.87 5.94 7.25 6.76 6.92 6.68 4.89 ...
         7.47 6.53 6.76 6.96 6.58 7.92 8.47 6.27 8.05 ...
         5.24 5.60 6.69 7.55 6.02 7.34 6.81 7.22 6.39 ...
         6.40 8.28 5.39 5.68 6.71 7.89 5.69 5.18 7.84 ...
         7.18 7.54 6.04 4.58 6.82 4.45 6.75 5.28 7.42 ...
         6.88 7.10 5.24 9.12 7.37 5.50 5.52 6.34 5.31 ...
         7.71 6.88 6.45 7.51 6.21 7.44 6.15 6.25 5.59 ...
         6.68 6.52 4.03 5.35 6.53 3.68 5.91 6.68 6.18 ...
         7.80 7.17 7.31 4.48 5.69 7.11 6.87 6.14 4.73 ...
         6.60 5.61 7.32 6.75 6.28 6.41 7.31 6.68 7.26 ...
         7.94 7.67 4.72 6.01 5.79 7.38 5.98 5.36 6.43 ...
         7.25 5.54 6.66 6.47 6.84 6.13 6.21 5.52 6.33 ...
         7.55 6.24 7.84];
         max(X)
        X = [X zeros(1,200)+9.3 zeros(1,200)+3.2];
    %Нахождения количества элементов в выборке.
    len_X = length(X);
    
    %Нахождение максимального и минимального элементов выборки X.
    M_max = max(X);
    M_min = min(X);
    fprintf('Нахождение максимального и минимального элементов выборки X.\nM_max = %f;\nM_min = %f;\n\n', M_max, M_min);

    %Нахождение размаха выборки X.
    %R = razmah(X);
    R = M_max - M_min;
    fprintf('Нахождение размаха выборки X.\nR = %f;\n\n', R);

    %Нахождение выборочного среднего выборки X.
    _mu_ = mean(X);
    %_mu_ = sum(X) / len_X;
    fprintf('Нахождение выборочного среднего выборки X.\nmu = %f;\n\n', _mu_);

    %Нахождение исправленной выборочной дисперсии выборки X.
    S_2 = var(X);
    %S_2 = sum(power(X - _mu_, 2)) / (len_X - 1);
    fprintf('Нахождение исправленной выборочной дисперсии выборки X.\nS_2 = %f;\n\n', S_2);

    %Группировка значений выборки в m = [log_2 n] + 2 интервала.
    [N, J, m] = IntervalStaticRow(X, len_X, M_min, M_max, R);
    
    %Построение на одной координатной плоскости гистограммы и графика функции плотности
    %распределения вероятностей нормальной случайной величины с математическим ожиданием
    %_mu_ и дисперсией S_2.
    MakeHistogram_1(X, N, J, m, len_X, R, M_min, M_max, _mu_, S_2);
    
    %Построение на другой координатной плоскости графика эмпирической функции распределения
    %и функции распределения нормальной случайной величины с математическим ожиданием
    %_mu_ и дисперсией S_2.
    MakeHistogram_2(X, len_X, R, M_min, M_max, _mu_, S_2);
end

function R = razmah(X)
    R = max(X) - min(X);
end

function [N, J, m] = IntervalStaticRow(X, len_X, M_min, M_max, R)
    %Нахождение m - количества требуемых интервалов. 
    m = floor(log2(len_X)) + 2;
    
    %Создание вектора интервалов.
    J = M_min : (R / m) : M_max;
    
    %Нахождение количества элементов в каждом из интервалов.
    N = histc(X, J);
    len_N = length(N);
    N(len_N - 1) += N(len_N);
    N(len_N) = [];
    len_N = length(N);
    
    %Вывод интервального статистического ряда.
    fprintf('Интервальный статистический ряд выборки X (m = %d):\n', m);
    for i = 1 : (m - 1)
      fprintf('[ %f ; %f ) - %d;\n', J(i), J(i + 1), N(i));
    endfor
    fprintf('[ %f ; %f ] - %d;\n', J(len_N), J(len_N + 1), N(len_N));
end

function MakeHistogram_1(X, N, J, m, len_X, R, M_min, M_max, _mu_, S_2)
    %Построение окна.
    figure("numbertitle", "off", ...
           "name", "Гистограмма и график функции плотности распределения вероятностей нормальной случайной величины с математическим ожиданием _mu_ и дисперсией S_2.", ...
           "position", [10, 100, 1000, 850]);
      
    %Ni = [0, N / (len_X * (R / m)), 0];
    %Ji = [M_min, J];     
    Ni = [0, 0, N / (len_X * (R / m)), 0, 0];
    Ji = [3, M_min, J, 10];
    
    %Построение гистограммы.
    stairs(Ji, Ni, "linewidth", 1.2, "color", "b");
    
    hold on;
    
    %x = (M_min: (R / (len_X - 1)) : M_max);
    x = (3 : (R / (len_X - 1)) : 10);
    y = normpdf(x, _mu_, sqrt(S_2));
    
    %Построение графика.
    plot(x, y, "color", "r", "linewidth", 1.2);
    
    title("Гистограмма и график функции плотности распределения вероятностей\nнормальной случайной величины с математическим ожиданием mu и дисперсией S^2.", ...
          "fontsize", 15);
    legend("Гистограмма", "График", "fontsize", 15);
    grid;
    
    hold off;
end

function Y = ecdf(X, I)
    ni = length(I);
    nx = length(X);

    Y = zeros(1, ni);
    j = 1;
    i = 1;
    while (i <= nx && j <= ni)
        if (X(i) >= I(j))
            Y(j) = i - 1;
            j = j + 1;
        else
            i = i + 1;
        endif
    endwhile
    
    while (j <= ni)
        Y(j) = i - 1;
        j = j + 1;
    endwhile
    
    for i = 1:ni
        Y(i) = Y(i) / nx;
    end

end

function MakeHistogram_2(X, len_X, R, M_min, M_max, _mu_, S_2)
    %Построение окна.
    figure("numbertitle", "off", ...
           "name", "График эмпирической функции распределения и функции распределения нормальной случайной величины с математическим ожиданием _mu_ и дисперсией S_2.", ...
           "position", [10, 100, 1000, 850]);
       
    %Построение графиков.
    %I = (M_min : (R / (len_X - 1)) : M_max);    
    I = (3 : (R / (len_X - 1)) : 10);
    Y = ecdf(sort(X), I); 
    stairs(I, Y, "linewidth", 1.2, "color", "b");
    
    hold on;
    
    %x = (M_min : (R / (len_X - 1)) : M_max);
    x = (3 : (R / (len_X - 1)) : 10);
    y = normcdf(x, _mu_, sqrt(S_2));
    plot(x, y, "color", "r", "linewidth", 1.2);
    
    title("График эмпирической функции распределения и функции распределения\nнормальной случайной величины с математическим ожиданием mu и дисперсией S^2.", ...
          "fontsize", 15);
    legend("Функция №1", "Функция №2", "fontsize", 15, "location", "northwest");
    grid;
    
    hold off;
end